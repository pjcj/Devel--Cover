#!/bin/bash

# Copyright 2001-2017, Paul Johnson (paul@pjcj.net)

# This software is free.  It is licensed under the same terms as Perl itself.

# The latest version of this software should be available from my homepage:
# http://www.pjcj.net

set -euo pipefail

script=$(basename "$0")
scrdir=$(readlink -f "$(dirname "$0")")
readonly LOG_FILE="/tmp/$script.log"
_p() { l=$1; shift; echo "$l $script: $*" | tee -a "$LOG_FILE" >&2; }
pt() { _p "[TRACE]  " "$*";                                         }
pd() { _p "[DEBUG]  " "$*";                                         }
pi() { _p "[INFO]   " "$*";                                         }
pw() { _p "[WARNING]" "$*";                                         }
pe() { _p "[ERROR]  " "$*";                                         }
pf() { _p "[FATAL]  " "$*"; exit 1;                                 }

usage() {
    cat <<EOT
$script --help
$script --trace --verbose
$script --cpancover_dir=/cover/staging_dev --image=pjcj/cpancover_dev cpancover-run
EOT
    exit 0
}

cleanup() {
    declare -r res=$?
    ((verbose)) && pi "Cleaning up"
    exit $res
}

export AUTOMATED_TESTING=1
export NONINTERACTIVE_TESTING=1
export EXTENDED_TESTING=1

PATH="$scrdir:$PATH"
verbose=${CPANCOVER_VERBOSE:-0}
cpancover_staging=${CPANCOVER_STAGING:-~/staging}
docker=${CPANCOVER_DOCKER:-docker}
docker_image=${CPANCOVER_IMAGE:-pjcj/cpancover}

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            shift
            ;;
        -t|--trace)
            set -x
            shift
            ;;
        -v|--verbose)
            verbose=1
            shift
            ;;
        -d|--cpancover_dir)
            cpancover_staging="$2"
            shift 2
            ;;
        -i|--image)
            docker_image="$2"
            shift 2
            ;;
        *)
            break
            ;;
    esac
done

export CPANCOVER_VERBOSE=$verbose
export CPANCOVER_STAGING=$cpancover_staging
export CPANCOVER_DOCKER=$docker
export CPANCOVER_IMAGE=$docker_image

# TODO - clarify relationship between these two
cpancover_dir=$cpancover_staging

main() {
    ((verbose)) && pi "Running $*"
    [ -z "${1:-}" ] && pf "Missing argument"
    case "$1" in
        update-copyright)
            from="${2:-$(date +'%Y' --date='last year')}"
            to="${3:-$(date +'%Y')}"
            echo "Updating copyright from $from to $to"
            files=$(git ls-files)
            # shellcheck disable=SC2086
            perl -pi -e "s/Copyright \d+-\K$from(, Paul Johnson)/$to\$1/i" $files
            # shellcheck disable=SC2086
            perl -pi -e "s/Copyright $from\K(, Paul Johnson)/-$to\$1/i"    $files
            ;;
        install_dependencies)
            cpan App::cpm
            cpm install --workers=10 --global                               \
                Sereal Digest::MD5 Template Pod::Coverage::CountParents     \
                Capture::Tiny Parallel::Iterator Template Class::XSAccessor \
                Moo namespace::clean CPAN::Releases::Latest JSON::MaybeXS   \
                CPAN::DistnameInfo
            ;;
        nice_cpus)
            perl -Iutils -MDevel::Cover::BuildUtils=nice_cpus -e 'print nice_cpus'
            ;;
        all_versions)
            shift
            ./utils/all_versions "$@"
            ;;
        cpancover)
            shift;
            jobs=$($0 nice_cpus)
            if [ -z "${CPANCOVER_LOCAL:-}" ]; then
                cpancover=cpancover
            else
                cpancover="perl -Mblib bin/cpancover -local"
            fi
            if ! [ -z "${CPANCOVER_VERBOSE:-}" ]; then
                cpancover="$cpancover -verbose"
            fi
            if ! [ -z "${CPANCOVER_FORCE:-}" ]; then
                cpancover="$cpancover -force"
            fi
            cmd="$cpancover -results_dir $cpancover_dir -workers $jobs $*"
            # echo "$cmd"
            $cmd
            ;;
        cpancover-compress)
            find "$cpancover_dir/" -name __failed__ -prune -o                 \
                                -type f -not -name '*.gz' -not -name '*.json' \
                                -exec gzip -f9 {} \;
            ;;
        cpancover-latest)
            $0 cpancover -latest
            ;;
        cpancover-build-module)
            module="$2"
            $0 cpancover -local_build -docker "$docker" -workers 1 "$module"
            $0 cpancover-compress
            ;;
        cpancover-docker-shell)
            staging="${2:-$cpancover_dir}"
            mkdir -p "$staging"
            # echo $name
            $docker run -it                                      \
                --volume=/home/pjcj/g/perl/Devel--Cover:/dc:rw   \
                --volume="$cpancover_staging:/remote_staging:rw" \
                --workdir=/dc --rm=false                         \
                --memory=1g                                      \
                "$docker_image" /bin/bash
            ;;
        cpancover-docker-module)
            module="$2"
            name="$3"
            staging="${4:-$cpancover_dir}"
            mkdir -p "$staging"
            # echo $name
            container=$($docker run -d                                   \
                        --volume=/home/pjcj/g/perl/Devel--Cover:/dc:ro   \
                        --volume="$cpancover_staging:/remote_staging:ro" \
                        --workdir=/dc --rm=false --name="$name"          \
                        --memory=1g                                      \
                        "$docker_image" dc cpancover-build-module "$module")
            # https://github.com/dotcloud/docker/issues/3986
            echo "container is $container"
            $docker wait "$name" > /dev/null
            # shellcheck disable=2181
            if [ $? = 0 ]; then
                $docker logs "$name" > "$staging/$name.out"
                local_staging="$staging/$name"
                mkdir -p "$local_staging"
                $docker cp "$name:/root/staging" "$local_staging"
                if [ -d "$local_staging" ]; then
                    sudo chmod -R 755 "$local_staging"
                    sudo find "$local_staging" -type f -exec chmod 644 {} \;
                    sudo chown -R pjcj:pjcj "$local_staging"
                    cd "$local_staging"/* || exit
                    for f in *; do
                        if [ -d "$f" ]; then
                            rm -rf "${staging:?}/$f"
                            mv "$f" "$staging"
                        fi
                    done
                    rm -r "$local_staging"
                fi
            fi
            $docker rm "$name"
            ;;
        cpancover-generate-html)
            echo "Generating HTML at $(date)"
            # perl -V
            $0 cpancover -generate_html
            $0 cpancover-compress
            json=$cpancover_dir/cpancover.json
            tmp=$json-tmp-$$.gz
            echo Compressing "$json"
            pigz < "$json" > "$tmp" && mv "$tmp" "$json.gz"
            echo Done
            ;;
        cpancover-run)
            export CPANCOVER_LOCAL=1
            export DEVEL_COVER_CPUS=10
            while true; do
                echo "Starting cpancover run at $(date) on $DEVEL_COVER_CPUS cpus"
                $0 cpancover-rm-docker  # just in case something bad happened
                $0 cpancover-latest | $0 cpancover
                $0 cpancover-generate-html
                echo "Finished cpancover run at $(date)"
                sleep 600  # 10 minutes
            done
            ;;
        cpancover-kill-docker)
            $docker ps -a | tail -n +2 | awk '{ print $1 }' | xargs -r "$docker" kill
            ;;
        cpancover-rm-docker)
            $docker ps -a | tail -n +2 | awk '{ print $1 }' | xargs -r "$docker" rm -f
            ;;
        sereal_each_bug)
            perl="${2:-perl}"
            $perl Makefile.PL
            make
            rm -rf cover_db
            cp tests/trivial tests/change
            $perl -Mblib -MDevel::Cover tests/change
            cp tmp/change tests
            $perl -Mblib -MDevel::Cover tests/change
            $perl -Mblib bin/cover -report text
            rm tests/change
            ;;
        options)
            perl -nE 'say $1 =~ s/"//gr =~ s/\s*\|\s*/\n/gr if /^ {8}"?([a-zA-Z0-9_ "|\\-]+)"?(?:\)|\s*\|\s*\\)$/ && $1 !~ /^_/' < "$0"
            ;;
        *)
            pf "Unknown option: $1"
            ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    trap cleanup EXIT INT
    main "$@"
fi

# For zsh completion:
# _%FILE%() { reply=($(%FILE% options)) }
# compctl -K _%FILE% %FILE%
