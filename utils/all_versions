#!/usr/bin/env perl

# Copyright 2004-2017, Paul Johnson (paul@pjcj.net)

# This software is free.  It is licensed under the same terms as Perl itself.

# The latest version of this software should be available from my homepage:
# http://www.pjcj.net

use strict;
use warnings;

use lib "utils";

use Getopt::Long;
use Parallel::Iterator "iterate_as_array";

use Devel::Cover::BuildUtils qw( prove_command njobs );

my $Options = {
    build          => 0,
    dry_run        => 0,
    force          => 0,
    ignore_failure => 0,
    silent         => 1,
    version        => [],
};

my $Silent = " >/dev/null 2>&1";

sub get_options {
    die "Bad option" unless
        GetOptions($Options, qw(
            build!
            dry_run!
            force!
            ignore_failure!
            list!
            silent!
            version=s
         ));

    $Options->{version} = [ map { ($_, "$_-thr") } qw(
        5.10.0 5.10.1
        5.12.0 5.12.1 5.12.2 5.12.3 5.12.4 5.12.5
        5.14.0 5.14.1 5.14.2 5.14.3 5.14.4
        5.16.0 5.16.1 5.16.2 5.16.3
        5.18.0 5.18.1 5.18.2 5.18.3 5.18.4
        5.20.0 5.20.1 5.20.2 5.20.3
        5.22.0 5.22.1 5.22.2 5.22.3
        5.24.0 5.24.1
        5.26.0
        5.27.0 5.27.1 5.27.2
    ) ] unless @{$Options->{version}};
    $Options->{version} =
        [ grep {
            my $cmd = "dc-$_ -v$Silent";
            my $exists = eval { !system $cmd };
            $Options->{force} || ($exists ^ $Options->{build})
        } @{$Options->{version}} ];
    print "Versions: @{$Options->{version}}\n";
    if ($Options->{list}) {
        exit;
    }
}

sub sys {
    my ($command, $user) = @_;
    print "$command\n";
    return if $Options->{dry_run};
    $command .= $Silent if $Options->{silent} && !$user;
    my $ret = system $command;
    warn "command failed: $?" if $ret && !$Options->{ignore_failure};
    !$ret
}

sub _mods {
    my ($v, $n) = @_;

    my ($s) = $n =~ /(\d+)$/;
    my $version = version->parse($n);

    my @mods = qw( Test::Harness Test::Warn HTML::Entities );

    return @mods if $v =~ /-thr/ && $s != 1;

    push @mods, qw(
        Template
        Pod::Coverage
        Test::Differences
        Readonly
        Parallel::Iterator
        Sereal
        JSON::MaybeXS
    );

    push @mods, "Algorithm::C3" if     $n =~ /^5\.8\.9\b/;
    push @mods, "Moose"         unless $n =~ /^5\.8\.[012]\b/;
    push @mods, "Moo"           unless $n =~ /^5\.8\.[012]\b/;
    push @mods, "DBM::Deep"     unless $n =~ /^5\.8\.[01234]\b/;
    push @mods, "Perl::Tidy"    if !$s ||   $s % 2;
    push @mods, "PPI::HTML"     if !$s || !($s % 2);

    @mods
}

sub _build_version {
    my ($v) = @_;

    print "building $v\n";
    # sleep 1; return;

    my ($n) = $v =~ /(\d+\.\d+\.\d+)/ or die "Can't parse [$v}";

    my $dir = "$ENV{HOME}/.plenv/versions/dc-$v/bin";
    unless (-d $dir) {
        my $opts = "";
        $opts .= "-D usethreads" if $v =~ /thr/;
        my $j = njobs;
        sys "plenv install $n --as dc-$v -j $j $opts --noman" or
            die "plenv $v failed";
        die "perl for $v does not exist" unless -d $dir;
    }

    $ENV{PATH} = "$dir:$ENV{PATH}";
    sys "curl -L http://cpanmin.us | perl - App::cpanminus" or do {
        warn "cpanm installation for $v failed";
        return;
    };

    my @mods = _mods($v, $n);
    sys "cpanm --notest @mods" or do {
        warn "module installation for $v failed";
        return;
    };

    my $ln = "/usr/local/bin/dc-$v";
    sys "sudo rm $ln$Silent";

    my ($perl) = "$dir/perl";
    print "$perl => $ln\n";
    sys "sudo ln -s $perl $ln" or warn "Can't ln $perl => $ln: $!";
}

sub _build_versions {
    my ($v) = @_;
    _build_version $v;
    _build_version "$v-thr";
}

sub build {
    print "Building: @{$Options->{version}}\n";
    my @res = iterate_as_array(
        { workers => njobs },
        sub {
            my (undef, $v) = @_;
            _build_versions($v);
        },
        [ grep !/-thr/, @{$Options->{version}} ]
    );
    exit;
}

sub main {
    get_options;
    build if $Options->{build};

    my $command = "@ARGV" or die "Usage: $0 [-v version] command\n";

    for my $v (@{$Options->{version}}) {
        my $perl = "dc-$v";
        (my $c = $command) =~ s/=perl/$perl/g;
        # print "Running [$c] from $v\n";
        # $c =~ s/=v/$v/g;
        if ($c =~ /^make /) {
            sys "rm -rf t/e2e";
            sys "$perl Makefile.PL";
            sys "make clean";
            sys "$perl Makefile.PL";
            sys "make";
        }
        sys $c, 1;
    }
}

main
